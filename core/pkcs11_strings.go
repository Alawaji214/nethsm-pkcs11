package core

/*
#include "pkcs11go.h"
*/
import "C"

import "fmt"

func CKAString(attr uint32) string {
	switch attr {
	case C.CKA_CLASS:
		return "CKA_CLASS"
	case C.CKA_TOKEN:
		return "CKA_TOKEN"
	case C.CKA_PRIVATE:
		return "CKA_PRIVATE"
	case C.CKA_LABEL:
		return "CKA_LABEL"
	case C.CKA_APPLICATION:
		return "CKA_APPLICATION"
	case C.CKA_VALUE:
		return "CKA_VALUE"
	case C.CKA_OBJECT_ID:
		return "CKA_OBJECT_ID"
	case C.CKA_CERTIFICATE_TYPE:
		return "CKA_CERTIFICATE_TYPE"
	case C.CKA_ISSUER:
		return "CKA_ISSUER"
	case C.CKA_SERIAL_NUMBER:
		return "CKA_SERIAL_NUMBER"
	case C.CKA_AC_ISSUER:
		return "CKA_AC_ISSUER"
	case C.CKA_OWNER:
		return "CKA_OWNER"
	case C.CKA_ATTR_TYPES:
		return "CKA_ATTR_TYPES"
	case C.CKA_TRUSTED:
		return "CKA_TRUSTED"
	case C.CKA_CERTIFICATE_CATEGORY:
		return "CKA_CERTIFICATE_CATEGORY"
	case C.CKA_JAVA_MIDP_SECURITY_DOMAIN:
		return "CKA_JAVA_MIDP_SECURITY_DOMAIN"
	case C.CKA_URL:
		return "CKA_URL"
	case C.CKA_HASH_OF_SUBJECT_PUBLIC_KEY:
		return "CKA_HASH_OF_SUBJECT_PUBLIC_KEY"
	case C.CKA_HASH_OF_ISSUER_PUBLIC_KEY:
		return "CKA_HASH_OF_ISSUER_PUBLIC_KEY"
	case C.CKA_NAME_HASH_ALGORITHM:
		return "CKA_NAME_HASH_ALGORITHM"
	case C.CKA_CHECK_VALUE:
		return "CKA_CHECK_VALUE"
	case C.CKA_KEY_TYPE:
		return "CKA_KEY_TYPE"
	case C.CKA_SUBJECT:
		return "CKA_SUBJECT"
	case C.CKA_ID:
		return "CKA_ID"
	case C.CKA_SENSITIVE:
		return "CKA_SENSITIVE"
	case C.CKA_ENCRYPT:
		return "CKA_ENCRYPT"
	case C.CKA_DECRYPT:
		return "CKA_DECRYPT"
	case C.CKA_WRAP:
		return "CKA_WRAP"
	case C.CKA_UNWRAP:
		return "CKA_UNWRAP"
	case C.CKA_SIGN:
		return "CKA_SIGN"
	case C.CKA_SIGN_RECOVER:
		return "CKA_SIGN_RECOVER"
	case C.CKA_VERIFY:
		return "CKA_VERIFY"
	case C.CKA_VERIFY_RECOVER:
		return "CKA_VERIFY_RECOVER"
	case C.CKA_DERIVE:
		return "CKA_DERIVE"
	case C.CKA_START_DATE:
		return "CKA_START_DATE"
	case C.CKA_END_DATE:
		return "CKA_END_DATE"
	case C.CKA_MODULUS:
		return "CKA_MODULUS"
	case C.CKA_MODULUS_BITS:
		return "CKA_MODULUS_BITS"
	case C.CKA_PUBLIC_EXPONENT:
		return "CKA_PUBLIC_EXPONENT"
	case C.CKA_PRIVATE_EXPONENT:
		return "CKA_PRIVATE_EXPONENT"
	case C.CKA_PRIME_1:
		return "CKA_PRIME_1"
	case C.CKA_PRIME_2:
		return "CKA_PRIME_2"
	case C.CKA_EXPONENT_1:
		return "CKA_EXPONENT_1"
	case C.CKA_EXPONENT_2:
		return "CKA_EXPONENT_2"
	case C.CKA_COEFFICIENT:
		return "CKA_COEFFICIENT"
	case C.CKA_PUBLIC_KEY_INFO:
		return "CKA_PUBLIC_KEY_INFO"
	case C.CKA_PRIME:
		return "CKA_PRIME"
	case C.CKA_SUBPRIME:
		return "CKA_SUBPRIME"
	case C.CKA_BASE:
		return "CKA_BASE"
	case C.CKA_PRIME_BITS:
		return "CKA_PRIME_BITS"
	case C.CKA_SUBPRIME_BITS:
		return "CKA_SUBPRIME_BITS"
	case C.CKA_VALUE_BITS:
		return "CKA_VALUE_BITS"
	case C.CKA_VALUE_LEN:
		return "CKA_VALUE_LEN"
	case C.CKA_EXTRACTABLE:
		return "CKA_EXTRACTABLE"
	case C.CKA_LOCAL:
		return "CKA_LOCAL"
	case C.CKA_NEVER_EXTRACTABLE:
		return "CKA_NEVER_EXTRACTABLE"
	case C.CKA_ALWAYS_SENSITIVE:
		return "CKA_ALWAYS_SENSITIVE"
	case C.CKA_KEY_GEN_MECHANISM:
		return "CKA_KEY_GEN_MECHANISM"
	case C.CKA_MODIFIABLE:
		return "CKA_MODIFIABLE"
	case C.CKA_COPYABLE:
		return "CKA_COPYABLE"
	case C.CKA_DESTROYABLE:
		return "CKA_DESTROYABLE"
	case C.CKA_EC_PARAMS:
		return "CKA_EC_PARAMS"
	case C.CKA_EC_POINT:
		return "CKA_EC_POINT"
	case C.CKA_SECONDARY_AUTH:
		return "CKA_SECONDARY_AUTH"
	case C.CKA_AUTH_PIN_FLAGS:
		return "CKA_AUTH_PIN_FLAGS"
	case C.CKA_ALWAYS_AUTHENTICATE:
		return "CKA_ALWAYS_AUTHENTICATE"
	case C.CKA_WRAP_WITH_TRUSTED:
		return "CKA_WRAP_WITH_TRUSTED"
	case C.CKA_WRAP_TEMPLATE:
		return "CKA_WRAP_TEMPLATE"
	case C.CKA_UNWRAP_TEMPLATE:
		return "CKA_UNWRAP_TEMPLATE"
	case C.CKA_DERIVE_TEMPLATE:
		return "CKA_DERIVE_TEMPLATE"
	case C.CKA_OTP_FORMAT:
		return "CKA_OTP_FORMAT"
	case C.CKA_OTP_LENGTH:
		return "CKA_OTP_LENGTH"
	case C.CKA_OTP_TIME_INTERVAL:
		return "CKA_OTP_TIME_INTERVAL"
	case C.CKA_OTP_USER_FRIENDLY_MODE:
		return "CKA_OTP_USER_FRIENDLY_MODE"
	case C.CKA_OTP_CHALLENGE_REQUIREMENT:
		return "CKA_OTP_CHALLENGE_REQUIREMENT"
	case C.CKA_OTP_TIME_REQUIREMENT:
		return "CKA_OTP_TIME_REQUIREMENT"
	case C.CKA_OTP_COUNTER_REQUIREMENT:
		return "CKA_OTP_COUNTER_REQUIREMENT"
	case C.CKA_OTP_PIN_REQUIREMENT:
		return "CKA_OTP_PIN_REQUIREMENT"
	case C.CKA_OTP_COUNTER:
		return "CKA_OTP_COUNTER"
	case C.CKA_OTP_TIME:
		return "CKA_OTP_TIME"
	case C.CKA_OTP_USER_IDENTIFIER:
		return "CKA_OTP_USER_IDENTIFIER"
	case C.CKA_OTP_SERVICE_IDENTIFIER:
		return "CKA_OTP_SERVICE_IDENTIFIER"
	case C.CKA_OTP_SERVICE_LOGO:
		return "CKA_OTP_SERVICE_LOGO"
	case C.CKA_OTP_SERVICE_LOGO_TYPE:
		return "CKA_OTP_SERVICE_LOGO_TYPE"
	case C.CKA_GOSTR3410_PARAMS:
		return "CKA_GOSTR3410_PARAMS"
	case C.CKA_GOSTR3411_PARAMS:
		return "CKA_GOSTR3411_PARAMS"
	case C.CKA_GOST28147_PARAMS:
		return "CKA_GOST28147_PARAMS"
	case C.CKA_HW_FEATURE_TYPE:
		return "CKA_HW_FEATURE_TYPE"
	case C.CKA_RESET_ON_INIT:
		return "CKA_RESET_ON_INIT"
	case C.CKA_HAS_RESET:
		return "CKA_HAS_RESET"
	case C.CKA_PIXEL_X:
		return "CKA_PIXEL_X"
	case C.CKA_PIXEL_Y:
		return "CKA_PIXEL_Y"
	case C.CKA_RESOLUTION:
		return "CKA_RESOLUTION"
	case C.CKA_CHAR_ROWS:
		return "CKA_CHAR_ROWS"
	case C.CKA_CHAR_COLUMNS:
		return "CKA_CHAR_COLUMNS"
	case C.CKA_COLOR:
		return "CKA_COLOR"
	case C.CKA_BITS_PER_PIXEL:
		return "CKA_BITS_PER_PIXEL"
	case C.CKA_CHAR_SETS:
		return "CKA_CHAR_SETS"
	case C.CKA_ENCODING_METHODS:
		return "CKA_ENCODING_METHODS"
	case C.CKA_MIME_TYPES:
		return "CKA_MIME_TYPES"
	case C.CKA_MECHANISM_TYPE:
		return "CKA_MECHANISM_TYPE"
	case C.CKA_REQUIRED_CMS_ATTRIBUTES:
		return "CKA_REQUIRED_CMS_ATTRIBUTES"
	case C.CKA_DEFAULT_CMS_ATTRIBUTES:
		return "CKA_DEFAULT_CMS_ATTRIBUTES"
	case C.CKA_SUPPORTED_CMS_ATTRIBUTES:
		return "CKA_SUPPORTED_CMS_ATTRIBUTES"
	case C.CKA_ALLOWED_MECHANISMS:
		return "CKA_ALLOWED_MECHANISMS"
	case C.CKA_VENDOR_DEFINED:
		return "CKA_VENDOR_DEFINED"
	default:
		return fmt.Sprint(attr)
	}
}
