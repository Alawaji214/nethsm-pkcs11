/*
 * NitroHSM
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SystemInformation struct for SystemInformation
type SystemInformation struct {
	Vendor string `json:"vendor"`
	Product string `json:"product"`
	Version string `json:"version"`
}

// NewSystemInformation instantiates a new SystemInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemInformation(vendor string, product string, version string, ) *SystemInformation {
	this := SystemInformation{}
	this.Vendor = vendor
	this.Product = product
	this.Version = version
	return &this
}

// NewSystemInformationWithDefaults instantiates a new SystemInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemInformationWithDefaults() *SystemInformation {
	this := SystemInformation{}
	return &this
}

// GetVendor returns the Vendor field value
func (o *SystemInformation) GetVendor() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *SystemInformation) GetVendorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *SystemInformation) SetVendor(v string) {
	o.Vendor = v
}

// GetProduct returns the Product field value
func (o *SystemInformation) GetProduct() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *SystemInformation) GetProductOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *SystemInformation) SetProduct(v string) {
	o.Product = v
}

// GetVersion returns the Version field value
func (o *SystemInformation) GetVersion() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SystemInformation) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SystemInformation) SetVersion(v string) {
	o.Version = v
}

func (o SystemInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vendor"] = o.Vendor
	}
	if true {
		toSerialize["product"] = o.Product
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSystemInformation struct {
	value *SystemInformation
	isSet bool
}

func (v NullableSystemInformation) Get() *SystemInformation {
	return v.value
}

func (v *NullableSystemInformation) Set(val *SystemInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemInformation(val *SystemInformation) *NullableSystemInformation {
	return &NullableSystemInformation{value: val, isSet: true}
}

func (v NullableSystemInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


