/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserItem struct for UserItem
type UserItem struct {
	User string `json:"user"`
}

// NewUserItem instantiates a new UserItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserItem(user string, ) *UserItem {
	this := UserItem{}
	this.User = user
	return &this
}

// NewUserItemWithDefaults instantiates a new UserItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserItemWithDefaults() *UserItem {
	this := UserItem{}
	return &this
}

// GetUser returns the User field value
func (o *UserItem) GetUser() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserItem) GetUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserItem) SetUser(v string) {
	o.User = v
}

func (o UserItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableUserItem struct {
	value *UserItem
	isSet bool
}

func (v NullableUserItem) Get() *UserItem {
	return v.value
}

func (v *NullableUserItem) Set(val *UserItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUserItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUserItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserItem(val *UserItem) *NullableUserItem {
	return &NullableUserItem{value: val, isSet: true}
}

func (v NullableUserItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


