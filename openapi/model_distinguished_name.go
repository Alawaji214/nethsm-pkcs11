/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DistinguishedName struct for DistinguishedName
type DistinguishedName struct {
	CountryName string `json:"countryName"`
	StateOrProvinceName string `json:"stateOrProvinceName"`
	LocalityName string `json:"localityName"`
	OrganizationName string `json:"organizationName"`
	OrganizationalUnitName string `json:"organizationalUnitName"`
	CommonName string `json:"commonName"`
	EmailAddress string `json:"emailAddress"`
	AdditionalProperties map[string]interface{}
}

type _DistinguishedName DistinguishedName

// NewDistinguishedName instantiates a new DistinguishedName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistinguishedName(countryName string, stateOrProvinceName string, localityName string, organizationName string, organizationalUnitName string, commonName string, emailAddress string, ) *DistinguishedName {
	this := DistinguishedName{}
	this.CountryName = countryName
	this.StateOrProvinceName = stateOrProvinceName
	this.LocalityName = localityName
	this.OrganizationName = organizationName
	this.OrganizationalUnitName = organizationalUnitName
	this.CommonName = commonName
	this.EmailAddress = emailAddress
	return &this
}

// NewDistinguishedNameWithDefaults instantiates a new DistinguishedName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistinguishedNameWithDefaults() *DistinguishedName {
	this := DistinguishedName{}
	return &this
}

// GetCountryName returns the CountryName field value
func (o *DistinguishedName) GetCountryName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetCountryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CountryName, true
}

// SetCountryName sets field value
func (o *DistinguishedName) SetCountryName(v string) {
	o.CountryName = v
}

// GetStateOrProvinceName returns the StateOrProvinceName field value
func (o *DistinguishedName) GetStateOrProvinceName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.StateOrProvinceName
}

// GetStateOrProvinceNameOk returns a tuple with the StateOrProvinceName field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetStateOrProvinceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StateOrProvinceName, true
}

// SetStateOrProvinceName sets field value
func (o *DistinguishedName) SetStateOrProvinceName(v string) {
	o.StateOrProvinceName = v
}

// GetLocalityName returns the LocalityName field value
func (o *DistinguishedName) GetLocalityName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.LocalityName
}

// GetLocalityNameOk returns a tuple with the LocalityName field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetLocalityNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LocalityName, true
}

// SetLocalityName sets field value
func (o *DistinguishedName) SetLocalityName(v string) {
	o.LocalityName = v
}

// GetOrganizationName returns the OrganizationName field value
func (o *DistinguishedName) GetOrganizationName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetOrganizationNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrganizationName, true
}

// SetOrganizationName sets field value
func (o *DistinguishedName) SetOrganizationName(v string) {
	o.OrganizationName = v
}

// GetOrganizationalUnitName returns the OrganizationalUnitName field value
func (o *DistinguishedName) GetOrganizationalUnitName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.OrganizationalUnitName
}

// GetOrganizationalUnitNameOk returns a tuple with the OrganizationalUnitName field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetOrganizationalUnitNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrganizationalUnitName, true
}

// SetOrganizationalUnitName sets field value
func (o *DistinguishedName) SetOrganizationalUnitName(v string) {
	o.OrganizationalUnitName = v
}

// GetCommonName returns the CommonName field value
func (o *DistinguishedName) GetCommonName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetCommonNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *DistinguishedName) SetCommonName(v string) {
	o.CommonName = v
}

// GetEmailAddress returns the EmailAddress field value
func (o *DistinguishedName) GetEmailAddress() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *DistinguishedName) SetEmailAddress(v string) {
	o.EmailAddress = v
}

func (o DistinguishedName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["countryName"] = o.CountryName
	}
	if true {
		toSerialize["stateOrProvinceName"] = o.StateOrProvinceName
	}
	if true {
		toSerialize["localityName"] = o.LocalityName
	}
	if true {
		toSerialize["organizationName"] = o.OrganizationName
	}
	if true {
		toSerialize["organizationalUnitName"] = o.OrganizationalUnitName
	}
	if true {
		toSerialize["commonName"] = o.CommonName
	}
	if true {
		toSerialize["emailAddress"] = o.EmailAddress
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DistinguishedName) UnmarshalJSON(bytes []byte) (err error) {
	varDistinguishedName := _DistinguishedName{}

	if err = json.Unmarshal(bytes, &varDistinguishedName); err == nil {
		*o = DistinguishedName(varDistinguishedName)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "countryName")
		delete(additionalProperties, "stateOrProvinceName")
		delete(additionalProperties, "localityName")
		delete(additionalProperties, "organizationName")
		delete(additionalProperties, "organizationalUnitName")
		delete(additionalProperties, "commonName")
		delete(additionalProperties, "emailAddress")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDistinguishedName struct {
	value *DistinguishedName
	isSet bool
}

func (v NullableDistinguishedName) Get() *DistinguishedName {
	return v.value
}

func (v *NullableDistinguishedName) Set(val *DistinguishedName) {
	v.value = val
	v.isSet = true
}

func (v NullableDistinguishedName) IsSet() bool {
	return v.isSet
}

func (v *NullableDistinguishedName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistinguishedName(val *DistinguishedName) *NullableDistinguishedName {
	return &NullableDistinguishedName{value: val, isSet: true}
}

func (v NullableDistinguishedName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistinguishedName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


