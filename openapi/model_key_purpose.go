/*
 * NitroHSM
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// KeyPurpose the model 'KeyPurpose'
type KeyPurpose string

// List of KeyPurpose
const (
	SIGN KeyPurpose = "Sign"
	DECRYPT KeyPurpose = "Decrypt"
	SIGN_AND_DECRYPT KeyPurpose = "SignAndDecrypt"
)

func (v *KeyPurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyPurpose(value)
	for _, existing := range []KeyPurpose{ "Sign", "Decrypt", "SignAndDecrypt",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyPurpose", value)
}

// Ptr returns reference to KeyPurpose value
func (v KeyPurpose) Ptr() *KeyPurpose {
	return &v
}

type NullableKeyPurpose struct {
	value *KeyPurpose
	isSet bool
}

func (v NullableKeyPurpose) Get() *KeyPurpose {
	return v.value
}

func (v *NullableKeyPurpose) Set(val *KeyPurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPurpose(val *KeyPurpose) *NullableKeyPurpose {
	return &NullableKeyPurpose{value: val, isSet: true}
}

func (v NullableKeyPurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

