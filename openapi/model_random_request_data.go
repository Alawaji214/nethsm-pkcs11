/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RandomRequestData struct for RandomRequestData
type RandomRequestData struct {
	Length int32 `json:"length"`
}

// NewRandomRequestData instantiates a new RandomRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomRequestData(length int32, ) *RandomRequestData {
	this := RandomRequestData{}
	this.Length = length
	return &this
}

// NewRandomRequestDataWithDefaults instantiates a new RandomRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomRequestDataWithDefaults() *RandomRequestData {
	this := RandomRequestData{}
	return &this
}

// GetLength returns the Length field value
func (o *RandomRequestData) GetLength() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Length
}

// GetLengthOk returns a tuple with the Length field value
// and a boolean to check if the value has been set.
func (o *RandomRequestData) GetLengthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Length, true
}

// SetLength sets field value
func (o *RandomRequestData) SetLength(v int32) {
	o.Length = v
}

func (o RandomRequestData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["length"] = o.Length
	}
	return json.Marshal(toSerialize)
}

type NullableRandomRequestData struct {
	value *RandomRequestData
	isSet bool
}

func (v NullableRandomRequestData) Get() *RandomRequestData {
	return v.value
}

func (v *NullableRandomRequestData) Set(val *RandomRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomRequestData(val *RandomRequestData) *NullableRandomRequestData {
	return &NullableRandomRequestData{value: val, isSet: true}
}

func (v NullableRandomRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


