/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HealthStateData struct for HealthStateData
type HealthStateData struct {
	State SystemState `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _HealthStateData HealthStateData

// NewHealthStateData instantiates a new HealthStateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthStateData(state SystemState, ) *HealthStateData {
	this := HealthStateData{}
	this.State = state
	return &this
}

// NewHealthStateDataWithDefaults instantiates a new HealthStateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthStateDataWithDefaults() *HealthStateData {
	this := HealthStateData{}
	return &this
}

// GetState returns the State field value
func (o *HealthStateData) GetState() SystemState {
	if o == nil  {
		var ret SystemState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *HealthStateData) GetStateOk() (*SystemState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *HealthStateData) SetState(v SystemState) {
	o.State = v
}

func (o HealthStateData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HealthStateData) UnmarshalJSON(bytes []byte) (err error) {
	varHealthStateData := _HealthStateData{}

	if err = json.Unmarshal(bytes, &varHealthStateData); err == nil {
		*o = HealthStateData(varHealthStateData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthStateData struct {
	value *HealthStateData
	isSet bool
}

func (v NullableHealthStateData) Get() *HealthStateData {
	return v.value
}

func (v *NullableHealthStateData) Set(val *HealthStateData) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthStateData) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthStateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthStateData(val *HealthStateData) *NullableHealthStateData {
	return &NullableHealthStateData{value: val, isSet: true}
}

func (v NullableHealthStateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthStateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


