package module

import "fmt"

func CKAString(v CK_ATTRIBUTE_TYPE) string {
	switch v {
	case CKA_CLASS:
		return "CKA_CLASS"
	case CKA_TOKEN:
		return "CKA_TOKEN"
	case CKA_PRIVATE:
		return "CKA_PRIVATE"
	case CKA_LABEL:
		return "CKA_LABEL"
	case CKA_APPLICATION:
		return "CKA_APPLICATION"
	case CKA_VALUE:
		return "CKA_VALUE"
	case CKA_OBJECT_ID:
		return "CKA_OBJECT_ID"
	case CKA_CERTIFICATE_TYPE:
		return "CKA_CERTIFICATE_TYPE"
	case CKA_ISSUER:
		return "CKA_ISSUER"
	case CKA_SERIAL_NUMBER:
		return "CKA_SERIAL_NUMBER"
	case CKA_AC_ISSUER:
		return "CKA_AC_ISSUER"
	case CKA_OWNER:
		return "CKA_OWNER"
	case CKA_ATTR_TYPES:
		return "CKA_ATTR_TYPES"
	case CKA_TRUSTED:
		return "CKA_TRUSTED"
	case CKA_CERTIFICATE_CATEGORY:
		return "CKA_CERTIFICATE_CATEGORY"
	case CKA_JAVA_MIDP_SECURITY_DOMAIN:
		return "CKA_JAVA_MIDP_SECURITY_DOMAIN"
	case CKA_URL:
		return "CKA_URL"
	case CKA_HASH_OF_SUBJECT_PUBLIC_KEY:
		return "CKA_HASH_OF_SUBJECT_PUBLIC_KEY"
	case CKA_HASH_OF_ISSUER_PUBLIC_KEY:
		return "CKA_HASH_OF_ISSUER_PUBLIC_KEY"
	case CKA_NAME_HASH_ALGORITHM:
		return "CKA_NAME_HASH_ALGORITHM"
	case CKA_CHECK_VALUE:
		return "CKA_CHECK_VALUE"
	case CKA_KEY_TYPE:
		return "CKA_KEY_TYPE"
	case CKA_SUBJECT:
		return "CKA_SUBJECT"
	case CKA_ID:
		return "CKA_ID"
	case CKA_SENSITIVE:
		return "CKA_SENSITIVE"
	case CKA_ENCRYPT:
		return "CKA_ENCRYPT"
	case CKA_DECRYPT:
		return "CKA_DECRYPT"
	case CKA_WRAP:
		return "CKA_WRAP"
	case CKA_UNWRAP:
		return "CKA_UNWRAP"
	case CKA_SIGN:
		return "CKA_SIGN"
	case CKA_SIGN_RECOVER:
		return "CKA_SIGN_RECOVER"
	case CKA_VERIFY:
		return "CKA_VERIFY"
	case CKA_VERIFY_RECOVER:
		return "CKA_VERIFY_RECOVER"
	case CKA_DERIVE:
		return "CKA_DERIVE"
	case CKA_START_DATE:
		return "CKA_START_DATE"
	case CKA_END_DATE:
		return "CKA_END_DATE"
	case CKA_MODULUS:
		return "CKA_MODULUS"
	case CKA_MODULUS_BITS:
		return "CKA_MODULUS_BITS"
	case CKA_PUBLIC_EXPONENT:
		return "CKA_PUBLIC_EXPONENT"
	case CKA_PRIVATE_EXPONENT:
		return "CKA_PRIVATE_EXPONENT"
	case CKA_PRIME_1:
		return "CKA_PRIME_1"
	case CKA_PRIME_2:
		return "CKA_PRIME_2"
	case CKA_EXPONENT_1:
		return "CKA_EXPONENT_1"
	case CKA_EXPONENT_2:
		return "CKA_EXPONENT_2"
	case CKA_COEFFICIENT:
		return "CKA_COEFFICIENT"
	case CKA_PUBLIC_KEY_INFO:
		return "CKA_PUBLIC_KEY_INFO"
	case CKA_PRIME:
		return "CKA_PRIME"
	case CKA_SUBPRIME:
		return "CKA_SUBPRIME"
	case CKA_BASE:
		return "CKA_BASE"
	case CKA_PRIME_BITS:
		return "CKA_PRIME_BITS"
	case CKA_SUBPRIME_BITS:
		return "CKA_SUBPRIME_BITS"
	case CKA_VALUE_BITS:
		return "CKA_VALUE_BITS"
	case CKA_VALUE_LEN:
		return "CKA_VALUE_LEN"
	case CKA_EXTRACTABLE:
		return "CKA_EXTRACTABLE"
	case CKA_LOCAL:
		return "CKA_LOCAL"
	case CKA_NEVER_EXTRACTABLE:
		return "CKA_NEVER_EXTRACTABLE"
	case CKA_ALWAYS_SENSITIVE:
		return "CKA_ALWAYS_SENSITIVE"
	case CKA_KEY_GEN_MECHANISM:
		return "CKA_KEY_GEN_MECHANISM"
	case CKA_MODIFIABLE:
		return "CKA_MODIFIABLE"
	case CKA_COPYABLE:
		return "CKA_COPYABLE"
	case CKA_DESTROYABLE:
		return "CKA_DESTROYABLE"
	case CKA_EC_PARAMS:
		return "CKA_EC_PARAMS"
	case CKA_EC_POINT:
		return "CKA_EC_POINT"
	case CKA_SECONDARY_AUTH:
		return "CKA_SECONDARY_AUTH"
	case CKA_AUTH_PIN_FLAGS:
		return "CKA_AUTH_PIN_FLAGS"
	case CKA_ALWAYS_AUTHENTICATE:
		return "CKA_ALWAYS_AUTHENTICATE"
	case CKA_WRAP_WITH_TRUSTED:
		return "CKA_WRAP_WITH_TRUSTED"
	case CKA_WRAP_TEMPLATE:
		return "CKA_WRAP_TEMPLATE"
	case CKA_UNWRAP_TEMPLATE:
		return "CKA_UNWRAP_TEMPLATE"
	// case C.CKA_DERIVE_TEMPLATE:
	// 	return "CKA_DERIVE_TEMPLATE"
	case CKA_OTP_FORMAT:
		return "CKA_OTP_FORMAT"
	case CKA_OTP_LENGTH:
		return "CKA_OTP_LENGTH"
	case CKA_OTP_TIME_INTERVAL:
		return "CKA_OTP_TIME_INTERVAL"
	case CKA_OTP_USER_FRIENDLY_MODE:
		return "CKA_OTP_USER_FRIENDLY_MODE"
	case CKA_OTP_CHALLENGE_REQUIREMENT:
		return "CKA_OTP_CHALLENGE_REQUIREMENT"
	case CKA_OTP_TIME_REQUIREMENT:
		return "CKA_OTP_TIME_REQUIREMENT"
	case CKA_OTP_COUNTER_REQUIREMENT:
		return "CKA_OTP_COUNTER_REQUIREMENT"
	case CKA_OTP_PIN_REQUIREMENT:
		return "CKA_OTP_PIN_REQUIREMENT"
	case CKA_OTP_COUNTER:
		return "CKA_OTP_COUNTER"
	case CKA_OTP_TIME:
		return "CKA_OTP_TIME"
	case CKA_OTP_USER_IDENTIFIER:
		return "CKA_OTP_USER_IDENTIFIER"
	case CKA_OTP_SERVICE_IDENTIFIER:
		return "CKA_OTP_SERVICE_IDENTIFIER"
	case CKA_OTP_SERVICE_LOGO:
		return "CKA_OTP_SERVICE_LOGO"
	case CKA_OTP_SERVICE_LOGO_TYPE:
		return "CKA_OTP_SERVICE_LOGO_TYPE"
	case CKA_GOSTR3410_PARAMS:
		return "CKA_GOSTR3410_PARAMS"
	case CKA_GOSTR3411_PARAMS:
		return "CKA_GOSTR3411_PARAMS"
	case CKA_GOST28147_PARAMS:
		return "CKA_GOST28147_PARAMS"
	case CKA_HW_FEATURE_TYPE:
		return "CKA_HW_FEATURE_TYPE"
	case CKA_RESET_ON_INIT:
		return "CKA_RESET_ON_INIT"
	case CKA_HAS_RESET:
		return "CKA_HAS_RESET"
	case CKA_PIXEL_X:
		return "CKA_PIXEL_X"
	case CKA_PIXEL_Y:
		return "CKA_PIXEL_Y"
	case CKA_RESOLUTION:
		return "CKA_RESOLUTION"
	case CKA_CHAR_ROWS:
		return "CKA_CHAR_ROWS"
	case CKA_CHAR_COLUMNS:
		return "CKA_CHAR_COLUMNS"
	case CKA_COLOR:
		return "CKA_COLOR"
	case CKA_BITS_PER_PIXEL:
		return "CKA_BITS_PER_PIXEL"
	case CKA_CHAR_SETS:
		return "CKA_CHAR_SETS"
	case CKA_ENCODING_METHODS:
		return "CKA_ENCODING_METHODS"
	case CKA_MIME_TYPES:
		return "CKA_MIME_TYPES"
	case CKA_MECHANISM_TYPE:
		return "CKA_MECHANISM_TYPE"
	case CKA_REQUIRED_CMS_ATTRIBUTES:
		return "CKA_REQUIRED_CMS_ATTRIBUTES"
	case CKA_DEFAULT_CMS_ATTRIBUTES:
		return "CKA_DEFAULT_CMS_ATTRIBUTES"
	case CKA_SUPPORTED_CMS_ATTRIBUTES:
		return "CKA_SUPPORTED_CMS_ATTRIBUTES"
	case CKA_ALLOWED_MECHANISMS:
		return "CKA_ALLOWED_MECHANISMS"
	case CKA_VENDOR_DEFINED:
		return "CKA_VENDOR_DEFINED"
	default:
		return fmt.Sprintf("INVALID_ATTR_TYPE_%v", v)
	}
}

func CKMString(v CK_MECHANISM_TYPE) string {
	switch v {
	case CKM_RSA_PKCS_KEY_PAIR_GEN:
		return "CKM_RSA_PKCS_KEY_PAIR_GEN"
	case CKM_RSA_PKCS:
		return "CKM_RSA_PKCS"
	case CKM_RSA_9796:
		return "CKM_RSA_9796"
	case CKM_RSA_X_509:
		return "CKM_RSA_X_509"
	case CKM_MD2_RSA_PKCS:
		return "CKM_MD2_RSA_PKCS"
	case CKM_MD5_RSA_PKCS:
		return "CKM_MD5_RSA_PKCS"
	case CKM_SHA1_RSA_PKCS:
		return "CKM_SHA1_RSA_PKCS"
	case CKM_RIPEMD128_RSA_PKCS:
		return "CKM_RIPEMD128_RSA_PKCS"
	case CKM_RIPEMD160_RSA_PKCS:
		return "CKM_RIPEMD160_RSA_PKCS"
	case CKM_RSA_PKCS_OAEP:
		return "CKM_RSA_PKCS_OAEP"
	case CKM_RSA_X9_31_KEY_PAIR_GEN:
		return "CKM_RSA_X9_31_KEY_PAIR_GEN"
	case CKM_RSA_X9_31:
		return "CKM_RSA_X9_31"
	case CKM_SHA1_RSA_X9_31:
		return "CKM_SHA1_RSA_X9_31"
	case CKM_RSA_PKCS_PSS:
		return "CKM_RSA_PKCS_PSS"
	case CKM_SHA1_RSA_PKCS_PSS:
		return "CKM_SHA1_RSA_PKCS_PSS"
	case CKM_DSA_KEY_PAIR_GEN:
		return "CKM_DSA_KEY_PAIR_GEN"
	case CKM_DSA:
		return "CKM_DSA"
	case CKM_DSA_SHA1:
		return "CKM_DSA_SHA1"
	case CKM_DSA_FIPS_G_GEN:
		return "CKM_DSA_FIPS_G_GEN"
	case CKM_DSA_SHA224:
		return "CKM_DSA_SHA224"
	case CKM_DSA_SHA256:
		return "CKM_DSA_SHA256"
	case CKM_DSA_SHA384:
		return "CKM_DSA_SHA384"
	case CKM_DSA_SHA512:
		return "CKM_DSA_SHA512"
	case CKM_DSA_SHA3_224:
		return "CKM_DSA_SHA3_224"
	case CKM_DSA_SHA3_256:
		return "CKM_DSA_SHA3_256"
	case CKM_DSA_SHA3_384:
		return "CKM_DSA_SHA3_384"
	case CKM_DSA_SHA3_512:
		return "CKM_DSA_SHA3_512"
	case CKM_DH_PKCS_KEY_PAIR_GEN:
		return "CKM_DH_PKCS_KEY_PAIR_GEN"
	case CKM_DH_PKCS_DERIVE:
		return "CKM_DH_PKCS_DERIVE"
	case CKM_X9_42_DH_KEY_PAIR_GEN:
		return "CKM_X9_42_DH_KEY_PAIR_GEN"
	case CKM_X9_42_DH_DERIVE:
		return "CKM_X9_42_DH_DERIVE"
	case CKM_X9_42_DH_HYBRID_DERIVE:
		return "CKM_X9_42_DH_HYBRID_DERIVE"
	case CKM_X9_42_MQV_DERIVE:
		return "CKM_X9_42_MQV_DERIVE"
	case CKM_SHA256_RSA_PKCS:
		return "CKM_SHA256_RSA_PKCS"
	case CKM_SHA384_RSA_PKCS:
		return "CKM_SHA384_RSA_PKCS"
	case CKM_SHA512_RSA_PKCS:
		return "CKM_SHA512_RSA_PKCS"
	case CKM_SHA256_RSA_PKCS_PSS:
		return "CKM_SHA256_RSA_PKCS_PSS"
	case CKM_SHA384_RSA_PKCS_PSS:
		return "CKM_SHA384_RSA_PKCS_PSS"
	case CKM_SHA512_RSA_PKCS_PSS:
		return "CKM_SHA512_RSA_PKCS_PSS"
	case CKM_SHA224_RSA_PKCS:
		return "CKM_SHA224_RSA_PKCS"
	case CKM_SHA224_RSA_PKCS_PSS:
		return "CKM_SHA224_RSA_PKCS_PSS"
	case CKM_SHA512_224:
		return "CKM_SHA512_224"
	case CKM_SHA512_224_HMAC:
		return "CKM_SHA512_224_HMAC"
	case CKM_SHA512_224_HMAC_GENERAL:
		return "CKM_SHA512_224_HMAC_GENERAL"
	case CKM_SHA512_224_KEY_DERIVATION:
		return "CKM_SHA512_224_KEY_DERIVATION"
	case CKM_SHA512_256:
		return "CKM_SHA512_256"
	case CKM_SHA512_256_HMAC:
		return "CKM_SHA512_256_HMAC"
	case CKM_SHA512_256_HMAC_GENERAL:
		return "CKM_SHA512_256_HMAC_GENERAL"
	case CKM_SHA512_256_KEY_DERIVATION:
		return "CKM_SHA512_256_KEY_DERIVATION"
	case CKM_SHA512_T:
		return "CKM_SHA512_T"
	case CKM_SHA512_T_HMAC:
		return "CKM_SHA512_T_HMAC"
	case CKM_SHA512_T_HMAC_GENERAL:
		return "CKM_SHA512_T_HMAC_GENERAL"
	case CKM_SHA512_T_KEY_DERIVATION:
		return "CKM_SHA512_T_KEY_DERIVATION"
	case CKM_SHA3_256_RSA_PKCS:
		return "CKM_SHA3_256_RSA_PKCS"
	case CKM_SHA3_384_RSA_PKCS:
		return "CKM_SHA3_384_RSA_PKCS"
	case CKM_SHA3_512_RSA_PKCS:
		return "CKM_SHA3_512_RSA_PKCS"
	case CKM_SHA3_256_RSA_PKCS_PSS:
		return "CKM_SHA3_256_RSA_PKCS_PSS"
	case CKM_SHA3_384_RSA_PKCS_PSS:
		return "CKM_SHA3_384_RSA_PKCS_PSS"
	case CKM_SHA3_512_RSA_PKCS_PSS:
		return "CKM_SHA3_512_RSA_PKCS_PSS"
	case CKM_SHA3_224_RSA_PKCS:
		return "CKM_SHA3_224_RSA_PKCS"
	case CKM_SHA3_224_RSA_PKCS_PSS:
		return "CKM_SHA3_224_RSA_PKCS_PSS"
	case CKM_RC2_KEY_GEN:
		return "CKM_RC2_KEY_GEN"
	case CKM_RC2_ECB:
		return "CKM_RC2_ECB"
	case CKM_RC2_CBC:
		return "CKM_RC2_CBC"
	case CKM_RC2_MAC:
		return "CKM_RC2_MAC"
	case CKM_RC2_MAC_GENERAL:
		return "CKM_RC2_MAC_GENERAL"
	case CKM_RC2_CBC_PAD:
		return "CKM_RC2_CBC_PAD"
	case CKM_RC4_KEY_GEN:
		return "CKM_RC4_KEY_GEN"
	case CKM_RC4:
		return "CKM_RC4"
	case CKM_DES_KEY_GEN:
		return "CKM_DES_KEY_GEN"
	case CKM_DES_ECB:
		return "CKM_DES_ECB"
	case CKM_DES_CBC:
		return "CKM_DES_CBC"
	case CKM_DES_MAC:
		return "CKM_DES_MAC"
	case CKM_DES_MAC_GENERAL:
		return "CKM_DES_MAC_GENERAL"
	case CKM_DES_CBC_PAD:
		return "CKM_DES_CBC_PAD"
	case CKM_DES2_KEY_GEN:
		return "CKM_DES2_KEY_GEN"
	case CKM_DES3_KEY_GEN:
		return "CKM_DES3_KEY_GEN"
	case CKM_DES3_ECB:
		return "CKM_DES3_ECB"
	case CKM_DES3_CBC:
		return "CKM_DES3_CBC"
	case CKM_DES3_MAC:
		return "CKM_DES3_MAC"
	case CKM_DES3_MAC_GENERAL:
		return "CKM_DES3_MAC_GENERAL"
	case CKM_DES3_CBC_PAD:
		return "CKM_DES3_CBC_PAD"
	case CKM_DES3_CMAC_GENERAL:
		return "CKM_DES3_CMAC_GENERAL"
	case CKM_DES3_CMAC:
		return "CKM_DES3_CMAC"
	case CKM_CDMF_KEY_GEN:
		return "CKM_CDMF_KEY_GEN"
	case CKM_CDMF_ECB:
		return "CKM_CDMF_ECB"
	case CKM_CDMF_CBC:
		return "CKM_CDMF_CBC"
	case CKM_CDMF_MAC:
		return "CKM_CDMF_MAC"
	case CKM_CDMF_MAC_GENERAL:
		return "CKM_CDMF_MAC_GENERAL"
	case CKM_CDMF_CBC_PAD:
		return "CKM_CDMF_CBC_PAD"
	case CKM_DES_OFB64:
		return "CKM_DES_OFB64"
	case CKM_DES_OFB8:
		return "CKM_DES_OFB8"
	case CKM_DES_CFB64:
		return "CKM_DES_CFB64"
	case CKM_DES_CFB8:
		return "CKM_DES_CFB8"
	case CKM_MD2:
		return "CKM_MD2"
	case CKM_MD2_HMAC:
		return "CKM_MD2_HMAC"
	case CKM_MD2_HMAC_GENERAL:
		return "CKM_MD2_HMAC_GENERAL"
	case CKM_MD5:
		return "CKM_MD5"
	case CKM_MD5_HMAC:
		return "CKM_MD5_HMAC"
	case CKM_MD5_HMAC_GENERAL:
		return "CKM_MD5_HMAC_GENERAL"
	case CKM_SHA_1:
		return "CKM_SHA_1"
	case CKM_SHA_1_HMAC:
		return "CKM_SHA_1_HMAC"
	case CKM_SHA_1_HMAC_GENERAL:
		return "CKM_SHA_1_HMAC_GENERAL"
	case CKM_RIPEMD128:
		return "CKM_RIPEMD128"
	case CKM_RIPEMD128_HMAC:
		return "CKM_RIPEMD128_HMAC"
	case CKM_RIPEMD128_HMAC_GENERAL:
		return "CKM_RIPEMD128_HMAC_GENERAL"
	case CKM_RIPEMD160:
		return "CKM_RIPEMD160"
	case CKM_RIPEMD160_HMAC:
		return "CKM_RIPEMD160_HMAC"
	case CKM_RIPEMD160_HMAC_GENERAL:
		return "CKM_RIPEMD160_HMAC_GENERAL"
	case CKM_SHA256:
		return "CKM_SHA256"
	case CKM_SHA256_HMAC:
		return "CKM_SHA256_HMAC"
	case CKM_SHA256_HMAC_GENERAL:
		return "CKM_SHA256_HMAC_GENERAL"
	case CKM_SHA224:
		return "CKM_SHA224"
	case CKM_SHA224_HMAC:
		return "CKM_SHA224_HMAC"
	case CKM_SHA224_HMAC_GENERAL:
		return "CKM_SHA224_HMAC_GENERAL"
	case CKM_SHA384:
		return "CKM_SHA384"
	case CKM_SHA384_HMAC:
		return "CKM_SHA384_HMAC"
	case CKM_SHA384_HMAC_GENERAL:
		return "CKM_SHA384_HMAC_GENERAL"
	case CKM_SHA512:
		return "CKM_SHA512"
	case CKM_SHA512_HMAC:
		return "CKM_SHA512_HMAC"
	case CKM_SHA512_HMAC_GENERAL:
		return "CKM_SHA512_HMAC_GENERAL"
	case CKM_SECURID_KEY_GEN:
		return "CKM_SECURID_KEY_GEN"
	case CKM_SECURID:
		return "CKM_SECURID"
	case CKM_HOTP_KEY_GEN:
		return "CKM_HOTP_KEY_GEN"
	case CKM_HOTP:
		return "CKM_HOTP"
	case CKM_ACTI:
		return "CKM_ACTI"
	case CKM_ACTI_KEY_GEN:
		return "CKM_ACTI_KEY_GEN"
	case CKM_SHA3_256:
		return "CKM_SHA3_256"
	case CKM_SHA3_256_HMAC:
		return "CKM_SHA3_256_HMAC"
	case CKM_SHA3_256_HMAC_GENERAL:
		return "CKM_SHA3_256_HMAC_GENERAL"
	case CKM_SHA3_256_KEY_GEN:
		return "CKM_SHA3_256_KEY_GEN"
	case CKM_SHA3_224:
		return "CKM_SHA3_224"
	case CKM_SHA3_224_HMAC:
		return "CKM_SHA3_224_HMAC"
	case CKM_SHA3_224_HMAC_GENERAL:
		return "CKM_SHA3_224_HMAC_GENERAL"
	case CKM_SHA3_224_KEY_GEN:
		return "CKM_SHA3_224_KEY_GEN"
	case CKM_SHA3_384:
		return "CKM_SHA3_384"
	case CKM_SHA3_384_HMAC:
		return "CKM_SHA3_384_HMAC"
	case CKM_SHA3_384_HMAC_GENERAL:
		return "CKM_SHA3_384_HMAC_GENERAL"
	case CKM_SHA3_384_KEY_GEN:
		return "CKM_SHA3_384_KEY_GEN"
	case CKM_SHA3_512:
		return "CKM_SHA3_512"
	case CKM_SHA3_512_HMAC:
		return "CKM_SHA3_512_HMAC"
	case CKM_SHA3_512_HMAC_GENERAL:
		return "CKM_SHA3_512_HMAC_GENERAL"
	case CKM_SHA3_512_KEY_GEN:
		return "CKM_SHA3_512_KEY_GEN"
	case CKM_CAST_KEY_GEN:
		return "CKM_CAST_KEY_GEN"
	case CKM_CAST_ECB:
		return "CKM_CAST_ECB"
	case CKM_CAST_CBC:
		return "CKM_CAST_CBC"
	case CKM_CAST_MAC:
		return "CKM_CAST_MAC"
	case CKM_CAST_MAC_GENERAL:
		return "CKM_CAST_MAC_GENERAL"
	case CKM_CAST_CBC_PAD:
		return "CKM_CAST_CBC_PAD"
	case CKM_CAST3_KEY_GEN:
		return "CKM_CAST3_KEY_GEN"
	case CKM_CAST3_ECB:
		return "CKM_CAST3_ECB"
	case CKM_CAST3_CBC:
		return "CKM_CAST3_CBC"
	case CKM_CAST3_MAC:
		return "CKM_CAST3_MAC"
	case CKM_CAST3_MAC_GENERAL:
		return "CKM_CAST3_MAC_GENERAL"
	case CKM_CAST3_CBC_PAD:
		return "CKM_CAST3_CBC_PAD"
	case CKM_CAST5_KEY_GEN:
		return "CKM_CAST5_KEY_GEN"
	// case CKM_CAST128_KEY_GEN:
	// 	return "CKM_CAST128_KEY_GEN"
	case CKM_CAST5_ECB:
		return "CKM_CAST5_ECB"
	// case CKM_CAST128_ECB:
	// 	return "CKM_CAST128_ECB"
	case CKM_CAST5_CBC:
		return "CKM_CAST5_CBC"
	// case CKM_CAST128_CBC:
	// 	return "CKM_CAST128_CBC"
	case CKM_CAST5_MAC:
		return "CKM_CAST5_MAC"
	// case CKM_CAST128_MAC:
	// 	return "CKM_CAST128_MAC"
	case CKM_CAST5_MAC_GENERAL:
		return "CKM_CAST5_MAC_GENERAL"
	// case CKM_CAST128_MAC_GENERAL:
	// 	return "CKM_CAST128_MAC_GENERAL"
	case CKM_CAST5_CBC_PAD:
		return "CKM_CAST5_CBC_PAD"
	// case CKM_CAST128_CBC_PAD:
	// 	return "CKM_CAST128_CBC_PAD"
	case CKM_RC5_KEY_GEN:
		return "CKM_RC5_KEY_GEN"
	case CKM_RC5_ECB:
		return "CKM_RC5_ECB"
	case CKM_RC5_CBC:
		return "CKM_RC5_CBC"
	case CKM_RC5_MAC:
		return "CKM_RC5_MAC"
	case CKM_RC5_MAC_GENERAL:
		return "CKM_RC5_MAC_GENERAL"
	case CKM_RC5_CBC_PAD:
		return "CKM_RC5_CBC_PAD"
	case CKM_IDEA_KEY_GEN:
		return "CKM_IDEA_KEY_GEN"
	case CKM_IDEA_ECB:
		return "CKM_IDEA_ECB"
	case CKM_IDEA_CBC:
		return "CKM_IDEA_CBC"
	case CKM_IDEA_MAC:
		return "CKM_IDEA_MAC"
	case CKM_IDEA_MAC_GENERAL:
		return "CKM_IDEA_MAC_GENERAL"
	case CKM_IDEA_CBC_PAD:
		return "CKM_IDEA_CBC_PAD"
	case CKM_GENERIC_SECRET_KEY_GEN:
		return "CKM_GENERIC_SECRET_KEY_GEN"
	case CKM_CONCATENATE_BASE_AND_KEY:
		return "CKM_CONCATENATE_BASE_AND_KEY"
	case CKM_CONCATENATE_BASE_AND_DATA:
		return "CKM_CONCATENATE_BASE_AND_DATA"
	case CKM_CONCATENATE_DATA_AND_BASE:
		return "CKM_CONCATENATE_DATA_AND_BASE"
	case CKM_XOR_BASE_AND_DATA:
		return "CKM_XOR_BASE_AND_DATA"
	case CKM_EXTRACT_KEY_FROM_KEY:
		return "CKM_EXTRACT_KEY_FROM_KEY"
	case CKM_SSL3_PRE_MASTER_KEY_GEN:
		return "CKM_SSL3_PRE_MASTER_KEY_GEN"
	case CKM_SSL3_MASTER_KEY_DERIVE:
		return "CKM_SSL3_MASTER_KEY_DERIVE"
	case CKM_SSL3_KEY_AND_MAC_DERIVE:
		return "CKM_SSL3_KEY_AND_MAC_DERIVE"
	case CKM_SSL3_MASTER_KEY_DERIVE_DH:
		return "CKM_SSL3_MASTER_KEY_DERIVE_DH"
	case CKM_TLS_PRE_MASTER_KEY_GEN:
		return "CKM_TLS_PRE_MASTER_KEY_GEN"
	case CKM_TLS_MASTER_KEY_DERIVE:
		return "CKM_TLS_MASTER_KEY_DERIVE"
	case CKM_TLS_KEY_AND_MAC_DERIVE:
		return "CKM_TLS_KEY_AND_MAC_DERIVE"
	case CKM_TLS_MASTER_KEY_DERIVE_DH:
		return "CKM_TLS_MASTER_KEY_DERIVE_DH"
	case CKM_TLS_PRF:
		return "CKM_TLS_PRF"
	case CKM_SSL3_MD5_MAC:
		return "CKM_SSL3_MD5_MAC"
	case CKM_SSL3_SHA1_MAC:
		return "CKM_SSL3_SHA1_MAC"
	case CKM_MD5_KEY_DERIVATION:
		return "CKM_MD5_KEY_DERIVATION"
	case CKM_MD2_KEY_DERIVATION:
		return "CKM_MD2_KEY_DERIVATION"
	case CKM_SHA1_KEY_DERIVATION:
		return "CKM_SHA1_KEY_DERIVATION"
	case CKM_SHA256_KEY_DERIVATION:
		return "CKM_SHA256_KEY_DERIVATION"
	case CKM_SHA384_KEY_DERIVATION:
		return "CKM_SHA384_KEY_DERIVATION"
	case CKM_SHA512_KEY_DERIVATION:
		return "CKM_SHA512_KEY_DERIVATION"
	case CKM_SHA224_KEY_DERIVATION:
		return "CKM_SHA224_KEY_DERIVATION"
	case CKM_SHA3_256_KEY_DERIVE:
		return "CKM_SHA3_256_KEY_DERIVE"
	case CKM_SHA3_224_KEY_DERIVE:
		return "CKM_SHA3_224_KEY_DERIVE"
	case CKM_SHA3_384_KEY_DERIVE:
		return "CKM_SHA3_384_KEY_DERIVE"
	case CKM_SHA3_512_KEY_DERIVE:
		return "CKM_SHA3_512_KEY_DERIVE"
	case CKM_SHAKE_128_KEY_DERIVE:
		return "CKM_SHAKE_128_KEY_DERIVE"
	case CKM_SHAKE_256_KEY_DERIVE:
		return "CKM_SHAKE_256_KEY_DERIVE"
	case CKM_PBE_MD2_DES_CBC:
		return "CKM_PBE_MD2_DES_CBC"
	case CKM_PBE_MD5_DES_CBC:
		return "CKM_PBE_MD5_DES_CBC"
	case CKM_PBE_MD5_CAST_CBC:
		return "CKM_PBE_MD5_CAST_CBC"
	case CKM_PBE_MD5_CAST3_CBC:
		return "CKM_PBE_MD5_CAST3_CBC"
	case CKM_PBE_MD5_CAST5_CBC:
		return "CKM_PBE_MD5_CAST5_CBC"
	// case CKM_PBE_MD5_CAST128_CBC:
	// 	return "CKM_PBE_MD5_CAST128_CBC"
	case CKM_PBE_SHA1_CAST5_CBC:
		return "CKM_PBE_SHA1_CAST5_CBC"
	// case CKM_PBE_SHA1_CAST128_CBC:
	// 	return "CKM_PBE_SHA1_CAST128_CBC"
	case CKM_PBE_SHA1_RC4_128:
		return "CKM_PBE_SHA1_RC4_128"
	case CKM_PBE_SHA1_RC4_40:
		return "CKM_PBE_SHA1_RC4_40"
	case CKM_PBE_SHA1_DES3_EDE_CBC:
		return "CKM_PBE_SHA1_DES3_EDE_CBC"
	case CKM_PBE_SHA1_DES2_EDE_CBC:
		return "CKM_PBE_SHA1_DES2_EDE_CBC"
	case CKM_PBE_SHA1_RC2_128_CBC:
		return "CKM_PBE_SHA1_RC2_128_CBC"
	case CKM_PBE_SHA1_RC2_40_CBC:
		return "CKM_PBE_SHA1_RC2_40_CBC"
	case CKM_PKCS5_PBKD2:
		return "CKM_PKCS5_PBKD2"
	case CKM_PBA_SHA1_WITH_SHA1_HMAC:
		return "CKM_PBA_SHA1_WITH_SHA1_HMAC"
	case CKM_WTLS_PRE_MASTER_KEY_GEN:
		return "CKM_WTLS_PRE_MASTER_KEY_GEN"
	case CKM_WTLS_MASTER_KEY_DERIVE:
		return "CKM_WTLS_MASTER_KEY_DERIVE"
	case CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC:
		return "CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC"
	case CKM_WTLS_PRF:
		return "CKM_WTLS_PRF"
	case CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE:
		return "CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE"
	case CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE:
		return "CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE"
	case CKM_TLS10_MAC_SERVER:
		return "CKM_TLS10_MAC_SERVER"
	case CKM_TLS10_MAC_CLIENT:
		return "CKM_TLS10_MAC_CLIENT"
	case CKM_TLS12_MAC:
		return "CKM_TLS12_MAC"
	case CKM_TLS12_KDF:
		return "CKM_TLS12_KDF"
	case CKM_TLS12_MASTER_KEY_DERIVE:
		return "CKM_TLS12_MASTER_KEY_DERIVE"
	case CKM_TLS12_KEY_AND_MAC_DERIVE:
		return "CKM_TLS12_KEY_AND_MAC_DERIVE"
	case CKM_TLS12_MASTER_KEY_DERIVE_DH:
		return "CKM_TLS12_MASTER_KEY_DERIVE_DH"
	case CKM_TLS12_KEY_SAFE_DERIVE:
		return "CKM_TLS12_KEY_SAFE_DERIVE"
	case CKM_TLS_MAC:
		return "CKM_TLS_MAC"
	case CKM_TLS_KDF:
		return "CKM_TLS_KDF"
	case CKM_KEY_WRAP_LYNKS:
		return "CKM_KEY_WRAP_LYNKS"
	case CKM_KEY_WRAP_SET_OAEP:
		return "CKM_KEY_WRAP_SET_OAEP"
	case CKM_CMS_SIG:
		return "CKM_CMS_SIG"
	case CKM_KIP_DERIVE:
		return "CKM_KIP_DERIVE"
	case CKM_KIP_WRAP:
		return "CKM_KIP_WRAP"
	case CKM_KIP_MAC:
		return "CKM_KIP_MAC"
	case CKM_CAMELLIA_KEY_GEN:
		return "CKM_CAMELLIA_KEY_GEN"
	case CKM_CAMELLIA_ECB:
		return "CKM_CAMELLIA_ECB"
	case CKM_CAMELLIA_CBC:
		return "CKM_CAMELLIA_CBC"
	case CKM_CAMELLIA_MAC:
		return "CKM_CAMELLIA_MAC"
	case CKM_CAMELLIA_MAC_GENERAL:
		return "CKM_CAMELLIA_MAC_GENERAL"
	case CKM_CAMELLIA_CBC_PAD:
		return "CKM_CAMELLIA_CBC_PAD"
	case CKM_CAMELLIA_ECB_ENCRYPT_DATA:
		return "CKM_CAMELLIA_ECB_ENCRYPT_DATA"
	case CKM_CAMELLIA_CBC_ENCRYPT_DATA:
		return "CKM_CAMELLIA_CBC_ENCRYPT_DATA"
	case CKM_CAMELLIA_CTR:
		return "CKM_CAMELLIA_CTR"
	case CKM_ARIA_KEY_GEN:
		return "CKM_ARIA_KEY_GEN"
	case CKM_ARIA_ECB:
		return "CKM_ARIA_ECB"
	case CKM_ARIA_CBC:
		return "CKM_ARIA_CBC"
	case CKM_ARIA_MAC:
		return "CKM_ARIA_MAC"
	case CKM_ARIA_MAC_GENERAL:
		return "CKM_ARIA_MAC_GENERAL"
	case CKM_ARIA_CBC_PAD:
		return "CKM_ARIA_CBC_PAD"
	case CKM_ARIA_ECB_ENCRYPT_DATA:
		return "CKM_ARIA_ECB_ENCRYPT_DATA"
	case CKM_ARIA_CBC_ENCRYPT_DATA:
		return "CKM_ARIA_CBC_ENCRYPT_DATA"
	case CKM_SEED_KEY_GEN:
		return "CKM_SEED_KEY_GEN"
	case CKM_SEED_ECB:
		return "CKM_SEED_ECB"
	case CKM_SEED_CBC:
		return "CKM_SEED_CBC"
	case CKM_SEED_MAC:
		return "CKM_SEED_MAC"
	case CKM_SEED_MAC_GENERAL:
		return "CKM_SEED_MAC_GENERAL"
	case CKM_SEED_CBC_PAD:
		return "CKM_SEED_CBC_PAD"
	case CKM_SEED_ECB_ENCRYPT_DATA:
		return "CKM_SEED_ECB_ENCRYPT_DATA"
	case CKM_SEED_CBC_ENCRYPT_DATA:
		return "CKM_SEED_CBC_ENCRYPT_DATA"
	case CKM_SKIPJACK_KEY_GEN:
		return "CKM_SKIPJACK_KEY_GEN"
	case CKM_SKIPJACK_ECB64:
		return "CKM_SKIPJACK_ECB64"
	case CKM_SKIPJACK_CBC64:
		return "CKM_SKIPJACK_CBC64"
	case CKM_SKIPJACK_OFB64:
		return "CKM_SKIPJACK_OFB64"
	case CKM_SKIPJACK_CFB64:
		return "CKM_SKIPJACK_CFB64"
	case CKM_SKIPJACK_CFB32:
		return "CKM_SKIPJACK_CFB32"
	case CKM_SKIPJACK_CFB16:
		return "CKM_SKIPJACK_CFB16"
	case CKM_SKIPJACK_CFB8:
		return "CKM_SKIPJACK_CFB8"
	case CKM_SKIPJACK_WRAP:
		return "CKM_SKIPJACK_WRAP"
	case CKM_SKIPJACK_PRIVATE_WRAP:
		return "CKM_SKIPJACK_PRIVATE_WRAP"
	case CKM_SKIPJACK_RELAYX:
		return "CKM_SKIPJACK_RELAYX"
	case CKM_KEA_KEY_PAIR_GEN:
		return "CKM_KEA_KEY_PAIR_GEN"
	case CKM_KEA_KEY_DERIVE:
		return "CKM_KEA_KEY_DERIVE"
	case CKM_KEA_DERIVE:
		return "CKM_KEA_DERIVE"
	case CKM_FORTEZZA_TIMESTAMP:
		return "CKM_FORTEZZA_TIMESTAMP"
	case CKM_BATON_KEY_GEN:
		return "CKM_BATON_KEY_GEN"
	case CKM_BATON_ECB128:
		return "CKM_BATON_ECB128"
	case CKM_BATON_ECB96:
		return "CKM_BATON_ECB96"
	case CKM_BATON_CBC128:
		return "CKM_BATON_CBC128"
	case CKM_BATON_COUNTER:
		return "CKM_BATON_COUNTER"
	case CKM_BATON_SHUFFLE:
		return "CKM_BATON_SHUFFLE"
	case CKM_BATON_WRAP:
		return "CKM_BATON_WRAP"
	case CKM_ECDSA_KEY_PAIR_GEN:
		return "CKM_ECDSA_KEY_PAIR_GEN"
	// case CKM_EC_KEY_PAIR_GEN:
	// 	return "CKM_EC_KEY_PAIR_GEN"
	case CKM_ECDSA:
		return "CKM_ECDSA"
	case CKM_ECDSA_SHA1:
		return "CKM_ECDSA_SHA1"
	case CKM_ECDSA_SHA224:
		return "CKM_ECDSA_SHA224"
	case CKM_ECDSA_SHA256:
		return "CKM_ECDSA_SHA256"
	case CKM_ECDSA_SHA384:
		return "CKM_ECDSA_SHA384"
	case CKM_ECDSA_SHA512:
		return "CKM_ECDSA_SHA512"
	case CKM_ECDH1_DERIVE:
		return "CKM_ECDH1_DERIVE"
	case CKM_ECDH1_COFACTOR_DERIVE:
		return "CKM_ECDH1_COFACTOR_DERIVE"
	case CKM_ECMQV_DERIVE:
		return "CKM_ECMQV_DERIVE"
	case CKM_ECDH_AES_KEY_WRAP:
		return "CKM_ECDH_AES_KEY_WRAP"
	case CKM_RSA_AES_KEY_WRAP:
		return "CKM_RSA_AES_KEY_WRAP"
	case CKM_JUNIPER_KEY_GEN:
		return "CKM_JUNIPER_KEY_GEN"
	case CKM_JUNIPER_ECB128:
		return "CKM_JUNIPER_ECB128"
	case CKM_JUNIPER_CBC128:
		return "CKM_JUNIPER_CBC128"
	case CKM_JUNIPER_COUNTER:
		return "CKM_JUNIPER_COUNTER"
	case CKM_JUNIPER_SHUFFLE:
		return "CKM_JUNIPER_SHUFFLE"
	case CKM_JUNIPER_WRAP:
		return "CKM_JUNIPER_WRAP"
	case CKM_FASTHASH:
		return "CKM_FASTHASH"
	case CKM_AES_KEY_GEN:
		return "CKM_AES_KEY_GEN"
	case CKM_AES_ECB:
		return "CKM_AES_ECB"
	case CKM_AES_CBC:
		return "CKM_AES_CBC"
	case CKM_AES_MAC:
		return "CKM_AES_MAC"
	case CKM_AES_MAC_GENERAL:
		return "CKM_AES_MAC_GENERAL"
	case CKM_AES_CBC_PAD:
		return "CKM_AES_CBC_PAD"
	case CKM_AES_CTR:
		return "CKM_AES_CTR"
	case CKM_AES_GCM:
		return "CKM_AES_GCM"
	case CKM_AES_CCM:
		return "CKM_AES_CCM"
	case CKM_AES_CMAC_GENERAL:
		return "CKM_AES_CMAC_GENERAL"
	case CKM_AES_CMAC:
		return "CKM_AES_CMAC"
	case CKM_AES_CTS:
		return "CKM_AES_CTS"
	case CKM_AES_XCBC_MAC:
		return "CKM_AES_XCBC_MAC"
	case CKM_AES_XCBC_MAC_96:
		return "CKM_AES_XCBC_MAC_96"
	case CKM_AES_GMAC:
		return "CKM_AES_GMAC"
	case CKM_BLOWFISH_KEY_GEN:
		return "CKM_BLOWFISH_KEY_GEN"
	case CKM_BLOWFISH_CBC:
		return "CKM_BLOWFISH_CBC"
	case CKM_TWOFISH_KEY_GEN:
		return "CKM_TWOFISH_KEY_GEN"
	case CKM_TWOFISH_CBC:
		return "CKM_TWOFISH_CBC"
	case CKM_BLOWFISH_CBC_PAD:
		return "CKM_BLOWFISH_CBC_PAD"
	case CKM_TWOFISH_CBC_PAD:
		return "CKM_TWOFISH_CBC_PAD"
	case CKM_DES_ECB_ENCRYPT_DATA:
		return "CKM_DES_ECB_ENCRYPT_DATA"
	case CKM_DES_CBC_ENCRYPT_DATA:
		return "CKM_DES_CBC_ENCRYPT_DATA"
	case CKM_DES3_ECB_ENCRYPT_DATA:
		return "CKM_DES3_ECB_ENCRYPT_DATA"
	case CKM_DES3_CBC_ENCRYPT_DATA:
		return "CKM_DES3_CBC_ENCRYPT_DATA"
	case CKM_AES_ECB_ENCRYPT_DATA:
		return "CKM_AES_ECB_ENCRYPT_DATA"
	case CKM_AES_CBC_ENCRYPT_DATA:
		return "CKM_AES_CBC_ENCRYPT_DATA"
	case CKM_GOSTR3410_KEY_PAIR_GEN:
		return "CKM_GOSTR3410_KEY_PAIR_GEN"
	case CKM_GOSTR3410:
		return "CKM_GOSTR3410"
	case CKM_GOSTR3410_WITH_GOSTR3411:
		return "CKM_GOSTR3410_WITH_GOSTR3411"
	case CKM_GOSTR3410_KEY_WRAP:
		return "CKM_GOSTR3410_KEY_WRAP"
	case CKM_GOSTR3410_DERIVE:
		return "CKM_GOSTR3410_DERIVE"
	case CKM_GOSTR3411:
		return "CKM_GOSTR3411"
	case CKM_GOSTR3411_HMAC:
		return "CKM_GOSTR3411_HMAC"
	case CKM_GOST28147_KEY_GEN:
		return "CKM_GOST28147_KEY_GEN"
	case CKM_GOST28147_ECB:
		return "CKM_GOST28147_ECB"
	case CKM_GOST28147:
		return "CKM_GOST28147"
	case CKM_GOST28147_MAC:
		return "CKM_GOST28147_MAC"
	case CKM_GOST28147_KEY_WRAP:
		return "CKM_GOST28147_KEY_WRAP"
	case CKM_DSA_PARAMETER_GEN:
		return "CKM_DSA_PARAMETER_GEN"
	case CKM_DH_PKCS_PARAMETER_GEN:
		return "CKM_DH_PKCS_PARAMETER_GEN"
	case CKM_X9_42_DH_PARAMETER_GEN:
		return "CKM_X9_42_DH_PARAMETER_GEN"
	case CKM_DSA_PROBABLISTIC_PARAMETER_GEN:
		return "CKM_DSA_PROBABLISTIC_PARAMETER_GEN"
	case CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN:
		return "CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN"
	case CKM_AES_OFB:
		return "CKM_AES_OFB"
	case CKM_AES_CFB64:
		return "CKM_AES_CFB64"
	case CKM_AES_CFB8:
		return "CKM_AES_CFB8"
	case CKM_AES_CFB128:
		return "CKM_AES_CFB128"
	case CKM_AES_CFB1:
		return "CKM_AES_CFB1"
	case CKM_AES_KEY_WRAP:
		return "CKM_AES_KEY_WRAP"
	case CKM_AES_KEY_WRAP_PAD:
		return "CKM_AES_KEY_WRAP_PAD"
	case CKM_RSA_PKCS_TPM_1_1:
		return "CKM_RSA_PKCS_TPM_1_1"
	case CKM_RSA_PKCS_OAEP_TPM_1_1:
		return "CKM_RSA_PKCS_OAEP_TPM_1_1"
	case CKM_VENDOR_DEFINED:
		return "CKM_VENDOR_DEFINED"
	default:
		return fmt.Sprintf("INVALID_MECHANISM_TYPE_%v", v)
	}
}
