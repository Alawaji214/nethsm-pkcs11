/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// Switch the model 'Switch'
type Switch string

// List of Switch
const (
	SWITCH_ON  Switch = "on"
	SWITCH_OFF Switch = "off"
)

func (v *Switch) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Switch(value)
	for _, existing := range []Switch{"on", "off"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Switch", value)
}

// Ptr returns reference to Switch value
func (v Switch) Ptr() *Switch {
	return &v
}

type NullableSwitch struct {
	value *Switch
	isSet bool
}

func (v NullableSwitch) Get() *Switch {
	return v.value
}

func (v *NullableSwitch) Set(val *Switch) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitch) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitch(val *Switch) *NullableSwitch {
	return &NullableSwitch{value: val, isSet: true}
}

func (v NullableSwitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
