/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UnlockRequestData struct for UnlockRequestData
type UnlockRequestData struct {
	Passphrase string `json:"passphrase"`
	AdditionalProperties map[string]interface{}
}

type _UnlockRequestData UnlockRequestData

// NewUnlockRequestData instantiates a new UnlockRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnlockRequestData(passphrase string, ) *UnlockRequestData {
	this := UnlockRequestData{}
	this.Passphrase = passphrase
	return &this
}

// NewUnlockRequestDataWithDefaults instantiates a new UnlockRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnlockRequestDataWithDefaults() *UnlockRequestData {
	this := UnlockRequestData{}
	return &this
}

// GetPassphrase returns the Passphrase field value
func (o *UnlockRequestData) GetPassphrase() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value
// and a boolean to check if the value has been set.
func (o *UnlockRequestData) GetPassphraseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Passphrase, true
}

// SetPassphrase sets field value
func (o *UnlockRequestData) SetPassphrase(v string) {
	o.Passphrase = v
}

func (o UnlockRequestData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["passphrase"] = o.Passphrase
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UnlockRequestData) UnmarshalJSON(bytes []byte) (err error) {
	varUnlockRequestData := _UnlockRequestData{}

	if err = json.Unmarshal(bytes, &varUnlockRequestData); err == nil {
		*o = UnlockRequestData(varUnlockRequestData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "passphrase")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUnlockRequestData struct {
	value *UnlockRequestData
	isSet bool
}

func (v NullableUnlockRequestData) Get() *UnlockRequestData {
	return v.value
}

func (v *NullableUnlockRequestData) Set(val *UnlockRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableUnlockRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableUnlockRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnlockRequestData(val *UnlockRequestData) *NullableUnlockRequestData {
	return &NullableUnlockRequestData{value: val, isSet: true}
}

func (v NullableUnlockRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnlockRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


