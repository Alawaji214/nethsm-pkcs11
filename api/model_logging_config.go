/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LoggingConfig struct for LoggingConfig
type LoggingConfig struct {
	IpAddress string `json:"ipAddress"`
	Port int32 `json:"port"`
	LogLevel LogLevel `json:"logLevel"`
	AdditionalProperties map[string]interface{}
}

type _LoggingConfig LoggingConfig

// NewLoggingConfig instantiates a new LoggingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggingConfig(ipAddress string, port int32, logLevel LogLevel, ) *LoggingConfig {
	this := LoggingConfig{}
	this.IpAddress = ipAddress
	this.Port = port
	this.LogLevel = logLevel
	return &this
}

// NewLoggingConfigWithDefaults instantiates a new LoggingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggingConfigWithDefaults() *LoggingConfig {
	this := LoggingConfig{}
	return &this
}

// GetIpAddress returns the IpAddress field value
func (o *LoggingConfig) GetIpAddress() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *LoggingConfig) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *LoggingConfig) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetPort returns the Port field value
func (o *LoggingConfig) GetPort() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *LoggingConfig) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *LoggingConfig) SetPort(v int32) {
	o.Port = v
}

// GetLogLevel returns the LogLevel field value
func (o *LoggingConfig) GetLogLevel() LogLevel {
	if o == nil  {
		var ret LogLevel
		return ret
	}

	return o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value
// and a boolean to check if the value has been set.
func (o *LoggingConfig) GetLogLevelOk() (*LogLevel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LogLevel, true
}

// SetLogLevel sets field value
func (o *LoggingConfig) SetLogLevel(v LogLevel) {
	o.LogLevel = v
}

func (o LoggingConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["logLevel"] = o.LogLevel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LoggingConfig) UnmarshalJSON(bytes []byte) (err error) {
	varLoggingConfig := _LoggingConfig{}

	if err = json.Unmarshal(bytes, &varLoggingConfig); err == nil {
		*o = LoggingConfig(varLoggingConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ipAddress")
		delete(additionalProperties, "port")
		delete(additionalProperties, "logLevel")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoggingConfig struct {
	value *LoggingConfig
	isSet bool
}

func (v NullableLoggingConfig) Get() *LoggingConfig {
	return v.value
}

func (v *NullableLoggingConfig) Set(val *LoggingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingConfig(val *LoggingConfig) *NullableLoggingConfig {
	return &NullableLoggingConfig{value: val, isSet: true}
}

func (v NullableLoggingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


