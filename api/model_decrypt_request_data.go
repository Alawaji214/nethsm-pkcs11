/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DecryptRequestData struct for DecryptRequestData
type DecryptRequestData struct {
	Mode DecryptMode `json:"mode"`
	Encrypted string `json:"encrypted"`
	AdditionalProperties map[string]interface{}
}

type _DecryptRequestData DecryptRequestData

// NewDecryptRequestData instantiates a new DecryptRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptRequestData(mode DecryptMode, encrypted string, ) *DecryptRequestData {
	this := DecryptRequestData{}
	this.Mode = mode
	this.Encrypted = encrypted
	return &this
}

// NewDecryptRequestDataWithDefaults instantiates a new DecryptRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptRequestDataWithDefaults() *DecryptRequestData {
	this := DecryptRequestData{}
	return &this
}

// GetMode returns the Mode field value
func (o *DecryptRequestData) GetMode() DecryptMode {
	if o == nil  {
		var ret DecryptMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *DecryptRequestData) GetModeOk() (*DecryptMode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *DecryptRequestData) SetMode(v DecryptMode) {
	o.Mode = v
}

// GetEncrypted returns the Encrypted field value
func (o *DecryptRequestData) GetEncrypted() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value
// and a boolean to check if the value has been set.
func (o *DecryptRequestData) GetEncryptedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Encrypted, true
}

// SetEncrypted sets field value
func (o *DecryptRequestData) SetEncrypted(v string) {
	o.Encrypted = v
}

func (o DecryptRequestData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mode"] = o.Mode
	}
	if true {
		toSerialize["encrypted"] = o.Encrypted
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DecryptRequestData) UnmarshalJSON(bytes []byte) (err error) {
	varDecryptRequestData := _DecryptRequestData{}

	if err = json.Unmarshal(bytes, &varDecryptRequestData); err == nil {
		*o = DecryptRequestData(varDecryptRequestData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "mode")
		delete(additionalProperties, "encrypted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDecryptRequestData struct {
	value *DecryptRequestData
	isSet bool
}

func (v NullableDecryptRequestData) Get() *DecryptRequestData {
	return v.value
}

func (v *NullableDecryptRequestData) Set(val *DecryptRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptRequestData(val *DecryptRequestData) *NullableDecryptRequestData {
	return &NullableDecryptRequestData{value: val, isSet: true}
}

func (v NullableDecryptRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


