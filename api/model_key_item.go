/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// KeyItem struct for KeyItem
type KeyItem struct {
	Key                  string `json:"key"`
	AdditionalProperties map[string]interface{}
}

type _KeyItem KeyItem

// NewKeyItem instantiates a new KeyItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyItem(key string) *KeyItem {
	this := KeyItem{}
	this.Key = key
	return &this
}

// NewKeyItemWithDefaults instantiates a new KeyItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyItemWithDefaults() *KeyItem {
	this := KeyItem{}
	return &this
}

// GetKey returns the Key field value
func (o *KeyItem) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KeyItem) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KeyItem) SetKey(v string) {
	o.Key = v
}

func (o KeyItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *KeyItem) UnmarshalJSON(bytes []byte) (err error) {
	varKeyItem := _KeyItem{}

	if err = json.Unmarshal(bytes, &varKeyItem); err == nil {
		*o = KeyItem(varKeyItem)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyItem struct {
	value *KeyItem
	isSet bool
}

func (v NullableKeyItem) Get() *KeyItem {
	return v.value
}

func (v *NullableKeyItem) Set(val *KeyItem) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyItem) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyItem(val *KeyItem) *NullableKeyItem {
	return &NullableKeyItem{value: val, isSet: true}
}

func (v NullableKeyItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
