/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SystemInfo struct for SystemInfo
type SystemInfo struct {
	FirmwareVersion string `json:"firmwareVersion"`
	SoftwareVersion string `json:"softwareVersion"`
	HardwareVersion string `json:"hardwareVersion"`
	BuildTag string `json:"buildTag"`
	AdditionalProperties map[string]interface{}
}

type _SystemInfo SystemInfo

// NewSystemInfo instantiates a new SystemInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemInfo(firmwareVersion string, softwareVersion string, hardwareVersion string, buildTag string, ) *SystemInfo {
	this := SystemInfo{}
	this.FirmwareVersion = firmwareVersion
	this.SoftwareVersion = softwareVersion
	this.HardwareVersion = hardwareVersion
	this.BuildTag = buildTag
	return &this
}

// NewSystemInfoWithDefaults instantiates a new SystemInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemInfoWithDefaults() *SystemInfo {
	this := SystemInfo{}
	return &this
}

// GetFirmwareVersion returns the FirmwareVersion field value
func (o *SystemInfo) GetFirmwareVersion() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value
// and a boolean to check if the value has been set.
func (o *SystemInfo) GetFirmwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FirmwareVersion, true
}

// SetFirmwareVersion sets field value
func (o *SystemInfo) SetFirmwareVersion(v string) {
	o.FirmwareVersion = v
}

// GetSoftwareVersion returns the SoftwareVersion field value
func (o *SystemInfo) GetSoftwareVersion() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value
// and a boolean to check if the value has been set.
func (o *SystemInfo) GetSoftwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SoftwareVersion, true
}

// SetSoftwareVersion sets field value
func (o *SystemInfo) SetSoftwareVersion(v string) {
	o.SoftwareVersion = v
}

// GetHardwareVersion returns the HardwareVersion field value
func (o *SystemInfo) GetHardwareVersion() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.HardwareVersion
}

// GetHardwareVersionOk returns a tuple with the HardwareVersion field value
// and a boolean to check if the value has been set.
func (o *SystemInfo) GetHardwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HardwareVersion, true
}

// SetHardwareVersion sets field value
func (o *SystemInfo) SetHardwareVersion(v string) {
	o.HardwareVersion = v
}

// GetBuildTag returns the BuildTag field value
func (o *SystemInfo) GetBuildTag() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BuildTag
}

// GetBuildTagOk returns a tuple with the BuildTag field value
// and a boolean to check if the value has been set.
func (o *SystemInfo) GetBuildTagOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BuildTag, true
}

// SetBuildTag sets field value
func (o *SystemInfo) SetBuildTag(v string) {
	o.BuildTag = v
}

func (o SystemInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["firmwareVersion"] = o.FirmwareVersion
	}
	if true {
		toSerialize["softwareVersion"] = o.SoftwareVersion
	}
	if true {
		toSerialize["hardwareVersion"] = o.HardwareVersion
	}
	if true {
		toSerialize["buildTag"] = o.BuildTag
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SystemInfo) UnmarshalJSON(bytes []byte) (err error) {
	varSystemInfo := _SystemInfo{}

	if err = json.Unmarshal(bytes, &varSystemInfo); err == nil {
		*o = SystemInfo(varSystemInfo)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "firmwareVersion")
		delete(additionalProperties, "softwareVersion")
		delete(additionalProperties, "hardwareVersion")
		delete(additionalProperties, "buildTag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSystemInfo struct {
	value *SystemInfo
	isSet bool
}

func (v NullableSystemInfo) Get() *SystemInfo {
	return v.value
}

func (v *NullableSystemInfo) Set(val *SystemInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemInfo(val *SystemInfo) *NullableSystemInfo {
	return &NullableSystemInfo{value: val, isSet: true}
}

func (v NullableSystemInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


