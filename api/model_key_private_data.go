/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// KeyPrivateData struct for KeyPrivateData
type KeyPrivateData struct {
	PrimeP               *string `json:"primeP,omitempty"`
	PrimeQ               *string `json:"primeQ,omitempty"`
	PublicExponent       *string `json:"publicExponent,omitempty"`
	Data                 *string `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeyPrivateData KeyPrivateData

// NewKeyPrivateData instantiates a new KeyPrivateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPrivateData() *KeyPrivateData {
	this := KeyPrivateData{}
	return &this
}

// NewKeyPrivateDataWithDefaults instantiates a new KeyPrivateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPrivateDataWithDefaults() *KeyPrivateData {
	this := KeyPrivateData{}
	return &this
}

// GetPrimeP returns the PrimeP field value if set, zero value otherwise.
func (o *KeyPrivateData) GetPrimeP() string {
	if o == nil || o.PrimeP == nil {
		var ret string
		return ret
	}
	return *o.PrimeP
}

// GetPrimePOk returns a tuple with the PrimeP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPrivateData) GetPrimePOk() (*string, bool) {
	if o == nil || o.PrimeP == nil {
		return nil, false
	}
	return o.PrimeP, true
}

// HasPrimeP returns a boolean if a field has been set.
func (o *KeyPrivateData) HasPrimeP() bool {
	if o != nil && o.PrimeP != nil {
		return true
	}

	return false
}

// SetPrimeP gets a reference to the given string and assigns it to the PrimeP field.
func (o *KeyPrivateData) SetPrimeP(v string) {
	o.PrimeP = &v
}

// GetPrimeQ returns the PrimeQ field value if set, zero value otherwise.
func (o *KeyPrivateData) GetPrimeQ() string {
	if o == nil || o.PrimeQ == nil {
		var ret string
		return ret
	}
	return *o.PrimeQ
}

// GetPrimeQOk returns a tuple with the PrimeQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPrivateData) GetPrimeQOk() (*string, bool) {
	if o == nil || o.PrimeQ == nil {
		return nil, false
	}
	return o.PrimeQ, true
}

// HasPrimeQ returns a boolean if a field has been set.
func (o *KeyPrivateData) HasPrimeQ() bool {
	if o != nil && o.PrimeQ != nil {
		return true
	}

	return false
}

// SetPrimeQ gets a reference to the given string and assigns it to the PrimeQ field.
func (o *KeyPrivateData) SetPrimeQ(v string) {
	o.PrimeQ = &v
}

// GetPublicExponent returns the PublicExponent field value if set, zero value otherwise.
func (o *KeyPrivateData) GetPublicExponent() string {
	if o == nil || o.PublicExponent == nil {
		var ret string
		return ret
	}
	return *o.PublicExponent
}

// GetPublicExponentOk returns a tuple with the PublicExponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPrivateData) GetPublicExponentOk() (*string, bool) {
	if o == nil || o.PublicExponent == nil {
		return nil, false
	}
	return o.PublicExponent, true
}

// HasPublicExponent returns a boolean if a field has been set.
func (o *KeyPrivateData) HasPublicExponent() bool {
	if o != nil && o.PublicExponent != nil {
		return true
	}

	return false
}

// SetPublicExponent gets a reference to the given string and assigns it to the PublicExponent field.
func (o *KeyPrivateData) SetPublicExponent(v string) {
	o.PublicExponent = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *KeyPrivateData) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPrivateData) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *KeyPrivateData) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *KeyPrivateData) SetData(v string) {
	o.Data = &v
}

func (o KeyPrivateData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrimeP != nil {
		toSerialize["primeP"] = o.PrimeP
	}
	if o.PrimeQ != nil {
		toSerialize["primeQ"] = o.PrimeQ
	}
	if o.PublicExponent != nil {
		toSerialize["publicExponent"] = o.PublicExponent
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *KeyPrivateData) UnmarshalJSON(bytes []byte) (err error) {
	varKeyPrivateData := _KeyPrivateData{}

	if err = json.Unmarshal(bytes, &varKeyPrivateData); err == nil {
		*o = KeyPrivateData(varKeyPrivateData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "primeP")
		delete(additionalProperties, "primeQ")
		delete(additionalProperties, "publicExponent")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyPrivateData struct {
	value *KeyPrivateData
	isSet bool
}

func (v NullableKeyPrivateData) Get() *KeyPrivateData {
	return v.value
}

func (v *NullableKeyPrivateData) Set(val *KeyPrivateData) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPrivateData) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPrivateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPrivateData(val *KeyPrivateData) *NullableKeyPrivateData {
	return &NullableKeyPrivateData{value: val, isSet: true}
}

func (v NullableKeyPrivateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPrivateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
