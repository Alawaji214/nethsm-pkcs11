/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PrivateKey struct for PrivateKey
type PrivateKey struct {
	Mechanisms           []KeyMechanism `json:"mechanisms"`
	Type                 KeyType        `json:"type"`
	Key                  KeyPrivateData `json:"key"`
	AdditionalProperties map[string]interface{}
}

type _PrivateKey PrivateKey

// NewPrivateKey instantiates a new PrivateKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateKey(mechanisms []KeyMechanism, type_ KeyType, key KeyPrivateData) *PrivateKey {
	this := PrivateKey{}
	this.Mechanisms = mechanisms
	this.Type = type_
	this.Key = key
	return &this
}

// NewPrivateKeyWithDefaults instantiates a new PrivateKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateKeyWithDefaults() *PrivateKey {
	this := PrivateKey{}
	return &this
}

// GetMechanisms returns the Mechanisms field value
func (o *PrivateKey) GetMechanisms() []KeyMechanism {
	if o == nil {
		var ret []KeyMechanism
		return ret
	}

	return o.Mechanisms
}

// GetMechanismsOk returns a tuple with the Mechanisms field value
// and a boolean to check if the value has been set.
func (o *PrivateKey) GetMechanismsOk() (*[]KeyMechanism, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mechanisms, true
}

// SetMechanisms sets field value
func (o *PrivateKey) SetMechanisms(v []KeyMechanism) {
	o.Mechanisms = v
}

// GetType returns the Type field value
func (o *PrivateKey) GetType() KeyType {
	if o == nil {
		var ret KeyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PrivateKey) GetTypeOk() (*KeyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PrivateKey) SetType(v KeyType) {
	o.Type = v
}

// GetKey returns the Key field value
func (o *PrivateKey) GetKey() KeyPrivateData {
	if o == nil {
		var ret KeyPrivateData
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PrivateKey) GetKeyOk() (*KeyPrivateData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PrivateKey) SetKey(v KeyPrivateData) {
	o.Key = v
}

func (o PrivateKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mechanisms"] = o.Mechanisms
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["key"] = o.Key
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PrivateKey) UnmarshalJSON(bytes []byte) (err error) {
	varPrivateKey := _PrivateKey{}

	if err = json.Unmarshal(bytes, &varPrivateKey); err == nil {
		*o = PrivateKey(varPrivateKey)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "mechanisms")
		delete(additionalProperties, "type")
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivateKey struct {
	value *PrivateKey
	isSet bool
}

func (v NullablePrivateKey) Get() *PrivateKey {
	return v.value
}

func (v *NullablePrivateKey) Set(val *PrivateKey) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateKey) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateKey(val *PrivateKey) *NullablePrivateKey {
	return &NullablePrivateKey{value: val, isSet: true}
}

func (v NullablePrivateKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
